openapi: 3.0.0
info:
  version: "13"
  title: Frappe / ERPNext API
  contact:
    name: ALYF GmbH
    url: https://hyperdata.vn
    email: hyperdata@gmail.com
  license:
    name: GPL-3.0
    url: http://www.gnu.de/documents/gpl-3.0.en.html
servers:
- url: https://demo.hyperdata.vn
  description: Demo server
- url: https://{company}.hyperdata.vn
  description: Custom hyperdata.vn instance
  variables:
    company:
      default: demo
      description: Subdomain of your company's custom ERPNext instance
tags: 
  - name: Naive Authentication
    description: If you are developing something serious, you may want to use oAuth2.
  - name: RESTful API
    description: Create, read, update or delete any document
  - name: Remote Procedure Call
    description: Call a server methods
  - name: Example Procedures
    description: Some common server-side methods. Find more by searching the source code for `@frappe.whitelist()`
  - name: Example DocTypes
paths:
  /api/method/{dotted_path_to_method}:
    get:
      tags:
        - Remote Procedure Call
      parameters:
        - in: path
          name: dotted_path_to_method
          required: true
          schema:
            type: string
            example: frappe.auth.get_logged_user
          description: |
            Path to the function you'd like to call, separated by dots.
      summary: Call a remote procedure
      responses:
          '200':
            description: Successful
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Remote Procedure Call
      parameters:
        - in: path
          name: dotted_path_to_method
          required: true
          schema:
            type: string
            example: frappe.auth.get_logged_user
          description: |
            Path to the function you'd like to call, separated by dots.
      summary: Post data to a remote procedure
      responses:
          '200':
            description: Successful
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/Forbidden'
  /api/resource/{DocType}:
    post:
      tags:
        - RESTful API
      summary: Create a new document
      parameters:
        - $ref: '#/components/parameters/DocType'
      requestBody:
        content:
          application/json:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  type: object
      responses:
        "200":
          description: Document created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocType'
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
        - RESTful API
      summary: Get a list of documents
      description: Returns a list of documents of the given type
      parameters:
        - $ref: '#/components/parameters/DocType'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/PageLength'
        - $ref: '#/components/parameters/PageStart'
      responses:
        '200':
          description: |
            Found requested DocType. By default, only the "name" field is included in the listing, 
            to add more fields, you can pass the fields param to GET request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocList'
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/resource/{DocType}/{DocumentName}:
    get:
      tags:
        - RESTful API
      summary: Get a specific document
      description: Get a document by it's name, for example EMP001 of DocType Employee.
      parameters:
        - $ref: '#/components/parameters/DocType'
        - in: path
          name: DocumentName
          required: true
          schema:
            type: string
          description: |
            The name (ID) of the document you'd like to receive. For example EMP001 (of type Employee).
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
      responses:
        '200':
          $ref: '#/components/responses/GetDocumentOK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    put:
      tags:
        - RESTful API
      summary: Update a specific document
      description: TBD
      parameters:
        - $ref: '#/components/parameters/DocType'
        - in: path
          name: DocumentName
          required: true
          schema:
            type: string
          description: |
            The name (ID) of the document you'd like to update. For example EMP001 (of type Employee).
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated specified document
          content:
            application/json:
              schema:
                type: object
                properties:
                 data:
                  $ref: '#/components/schemas/DocType'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - RESTful API
      summary: Delete a specific document
      description: TBD
      parameters:
        - in: path
          name: DocType
          required: true
          schema:
            type: string
          description: |
            The type of the document you'd like to delete. For example Customer, Supplier, 
            Employee, Account, Lead, Company, Sales Invoice, Purchase Invoice, Stock Entry, etc.
        - in: path
          name: DocumentName
          required: true
          schema:
            type: string
          description: |
            The name (ID) of the document you'd like to delete. For example EMP001 (of type Employee).
      responses:
        '202':
          description: Deleted specified document
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/method/login:
    post:
      tags: 
        - Naive Authentication
        - Example Procedures
      summary: Authenticate yourself
      operationId: login
      parameters:
        - in: query
          name: usr
          schema:
            type: string
            example: Administrator
          required: false
          description: Your username
        - in: query
          name: pwd
          schema:
            type: string
            example: admin
          required: false
          description: Your password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usr:
                  type: string
                  example: Administrator
                pwd:
                  type: string
                  example: admin
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  type: object
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  full_name:
                    type: string
                    example: Administrator
                  message:
                    type: string
                    example: Logged in
                  home_page:
                    type: string
                    example: /desk
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/method/logout:
    get:
      tags: 
        - Naive Authentication
        - Example Procedures
      summary: Logout from current session
      responses:
          '200':
            description: Logged out.
            content:
              application/json:
                schema:
                  type: object
  /api/method/frappe.auth.get_logged_user:
    get:
      tags: 
        - Naive Authentication
        - Example Procedures
      summary: Get the user that is logged in
      operationId: authGetLoggedUser
      description: Get the currently logged in user
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: {"message":"demo@hyperdata.vn"}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/method/version:
    get:
      tags:
        - Example Procedures
      description: Get the version of the app
      responses:
          '200':
            description: Successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
                example: {"message":"10.1.36"}
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/Forbidden'
  /api/method/frappe.desk.tags.add_tag:
    post:
      tags:
        - Example Procedures
      description: Add a tag to a document
      parameters:
        - in: query
          name: tag
          description: Tag to add
          schema:
            type: string
            example: "My Tag"
        - in: query
          name: dt
          description: Target DocType
          schema:
            type: string
            example: "Sales Invoice"
        - in: query
          name: dn
          description: Target document
          schema:
            type: string
            example: "SINV-0001"
      responses:
          '200':
            description: Successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
                example: {"message":"My Tag"}
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/Forbidden'
  /api/method/frappe.client.rename_doc:
    post:
      tags:
        - Example Procedures
      description: Change the unique ID (name) of a document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                doctype:
                  type: string
                  example: 'Customer'
                old_name:
                  type: string
                  example: 'CUST-2021-00001'
                new_name:
                  type: string
                  example: 'K-0001'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: {"message":"K-0001"}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/method/frappe.client.insert_many:
    post:
      tags:
        - Example Procedures
      description: Insert multiple documents at once
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                docs:
                  type: array
                  items:
                    type: object
                    properties:
                      doctype:
                        type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: {"message":"K-0001"}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/method/uploadfile:
    post:
      tags:
        - Example Procedures
      description: Upload an attachment to any existing record
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                doctype:
                  type: string
                  description: Attach file to an instace of this DocType
                docname:
                  type: string
                  description: Name of the DocType instance
                docfield:
                  type: string
                  description: (Attach-)Field of the DocType instance
                filename:
                  type: string
                  example: example.pdf
                  description: How the file should be named in ERPNext
                from_form:
                  type: string
                  example: 1
                  description: Set to 0 if you're using a specific method
                method:
                  type: string
                  example: dotted.path.to.method
                  description: Specific whitelisted method to handle the request
                filedata:
                  type: string
                  description: Base64 encoded file data
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example: {
                "message": {
                  "file_url": "/files/example.pdf"
                }
              }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/resource/DocType:
    get:
      tags:
        - Example DocTypes
      summary: Get a list of Doctypes
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/PageLength'
        - $ref: '#/components/parameters/PageStart'
      responses:
        '200':
          $ref: '#/components/responses/GetListOK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/resource/Project:
    get:
      tags:
        - Example DocTypes
      summary: Get a list of projects
      description: Returns a list of projects
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/PageLength'
        - $ref: '#/components/parameters/PageStart'
      responses:
        '200':
          description: |
            Found some projects. By default, only the "name" field is included in the listing, 
            to add more fields, you can pass the fields param to GET request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocList'
              example:
                data: [
                  {name: My Project 1},
                  {name: My Project 2}
                ]
  /api/resource/Employee:
    get:
      tags:
        - Example DocTypes
      summary: Get a list of Employees
      description: |
        For example, fields=["name","company","employee_name"].
        
        To get the Employee for a specific user, pass filters=[["user_id","=","mail@example.com"]]
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/PageLength'
        - $ref: '#/components/parameters/PageStart'
      responses:
        '200':
          description: |
            Everything fine :)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocList'
              example:
                data: [
                  {
                    name: 'EMP/0001',
                    company: 'Google LLC',
                    employee_name: 'Larry Page'
                  },
                  {
                    name: 'EMP/0002',
                    company: 'Google LLC',
                    employee_name: 'Sergey Brin'
                  }
                ]
  /api/resource/Timesheet:
    post:
      tags:
        - Example DocTypes
      summary: Create a new timesheet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                company:
                  type: string
                  example: "Alyf"
                employee:
                  type: string
                  example: "EMP/0001"
                note:
                  type: string
                  example: "Built that feature"
                time_logs:
                  type: array
                  items:
                    type: object
                    properties:
                      from_time:
                        type: string
                        example: "2019-02-28 00:00:00"
                      to_time:
                        type: string
                        example: "2019-02-28 23:59:59"
                      project:
                        type: string
                        example: "Timetracking App"
                      activity_type:
                        type: string
                        example: "Development"
                      
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  type: object
      responses:
        "200":
          description: Document created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocType'
        "403":
          description: Insufficient Permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  exc:
                    type: string
                    example: Traceback (most recent call last) ...
                  _error_message:
                    type: string
                    example: Insufficient Permission for {DocType}
            text/html:
              schema:
                type: string
    get:
      tags:
        - Example DocTypes
      summary: Get a list of timesheets
      description: Returns a list of documents of the given type
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/PageLength'
        - $ref: '#/components/parameters/PageStart'
      responses:
        '200':
          description: |
            Found some timesheets. By default, only the "name" field is included in the listing, 
            to add more fields, you can pass the fields param to GET request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocList'
              example:
                {"data":[{"name":"TS-00001"},{"name":"TS-00002"}]}
  /api/resource/Webhook:
    post:
      tags:
        - Example DocTypes
      summary: Create a new Webhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook_doctype:
                  type: string
                  example: "Sales Invoice"
                webhook_docevent:
                  type: string
                  example: "on_submit"
                request_url:
                  type: string
                  example: "https://my.web.service/new/invoice"
                webhook_headers:
                  type: array
                  description: Request headers, for example for authorization
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "Authorization"
                      value:
                        type: string
                        example: "Basic tZaxXzUdgCXWhokGmoFNUJDfzpfmFwmbtgebyNRMm=="
                webhook_data:
                  type: array
                  description: Map document fields to keys
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "invoice_no"
                      fieldname:
                        type: string
                        example: "name"
      responses:
        '200':
          $ref: '#/components/responses/GetDocumentOK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
          - Example DocTypes
      summary: Get a list of Webhooks
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/PageLength'
        - $ref: '#/components/parameters/PageStart'
      responses:
        '200':
          $ref: '#/components/responses/GetListOK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
components:
  parameters:
    DocType:
      in: path
      name: DocType
      required: true
      schema:
        type: string
      description: |
        The DocType you'd like to receive. For example Customer, Supplier, 
        Employee, Account, Lead, Company, Sales Invoice, Purchase Invoice, Stock Entry, etc.
    Fields:
      in: query
      name: fields
      schema:
        type: array
        items:
          type: string
        default: ["name"]
      description: |
        By default, only the "name" field is included in the listing, to add more fields, 
        you can pass the fields param to GET request. For example, fields=["name","country"]
    Filters:
      in: query
      name: filters
      schema:
        type: array
        items:
          type: array
          items:
            type: string
      description: |
        You can filter the listing using sql conditions by passing them as the filters GET param.
        Each condition is an array of the format, [{doctype}, {field}, {operator}, {value}].
        For example, filters=[["Customer", "country", "=", "India"]]
    PageLength:
      in: query
      name: limit_page_length
      schema:
        type: integer
        default: 20
      description: |
        By default, all listings are returned paginated. With this parameter you can change the 
        page size (how many items are teturned at once).
    PageStart:
      in: query
      name: limit_start
      schema:
        type: integer
        default: 0
      description: |
        To request successive pages, pass a multiple of your limit_page_length as limit_start. 
        For Example, to request the second page, pass limit_start as 20.
  schemas:
    DocType:
      type: object
      properties:
        name:
          type: string
        modified_by:
          type: string
        creation:
          type: string
        modified:
          type: string
        doctype:
          type: string
        owner:
          type: string
        docstatus:
          type: integer
    DocList:
      type: object
      properties:
       data:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
    Message:
      type: object
      properties:
        message:
          type: string
  responses:
    GetDocumentOK:
      description: Found requested document
      content:
        application/json:
          schema:
            type: object
            properties:
             data:
              $ref: '#/components/schemas/DocType'
    GetListOK:
      description: Found requested documents
      content:
        application/json:
          schema:
            type: object
            properties:
             data:
              $ref: '#/components/schemas/DocList'
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              exc:
                type: string
                example: Traceback (most recent call last) ...
              _server_messages:
                type: string
                example: "[{\"message\": \"Not permitted\"}]"
        text/html:
          schema:
            type: string
    Forbidden:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              locals:
                type: string
              exc:
                type: string
                example: Traceback (most recent call last) ...
              _server_messages:
                type: string
                example: Incorrect password
        text/html:
          schema:
            type: string
  securitySchemes:
    tokenAuth: # arbitrary name
      type: apiKey
      in: header
      name: Authorization
      description: |
        Get your API keys at User -> Api Access -> Generate Keys.
        "headers = {'Authorization': 'token <api_key>:<api_secret>'}"
    basicAuth: # arbitrary name
      type: http
      scheme: basic
      description: |
        Get your API keys at User -> Api Access -> Generate Keys.
        username = api_key; password = api_secret
        [More info](https://frappe.io/docs/user/en/guides/integration/token_based_auth)
    oAuth2: # arbitrary name
      type: oauth2
      description: |
        This API uses OAuth 2 with the authorization code flow. 
        [More info]https://frappe.io/docs/user/en/guides/integration/using_oauth)
      flows:
        authorizationCode:
          authorizationUrl: /method/frappe.integrations.oauth2.authorize
          tokenUrl: /method/frappe.integrations.oauth2.get_token
          refreshUrl: /method/frappe.integrations.oauth2.get_token
          scopes:
            all: Same permissions as the user who created the oAuth client
externalDocs:
  url: https://frappe.io/docs/user/en/api/rest